/**
 * Created by zhengjinwei on 2015/12/29.
 */
var express = require('express');
var app = express();
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var session = require('express-session');
var morganLogger = require('morgan');
var fs = require("fs");
var path = require("path");
var async = require("async");


function geFileList(path) {
    var filesList = [];
    readFile(path, filesList);
    return filesList;
}

//遍历读取文件
function readFile(path, filesList) {
    var files = fs.readdirSync(path);//需要用到同步读取
    files.forEach(walk);
    function walk(file) {
        var states = fs.statSync(path + '/' + file);
        if (states.isDirectory()) {
            readFile(path + '/' + file, filesList);
        }
        else {
            //创建一个对象保存信息
            var obj = new Object();
            obj.size = states.size;//文件大小，以字节为单位
            obj.name = file;//文件名
            obj.path = path + '/' + file; //文件绝对路径
            filesList.push(obj);
        }
    }
}

var getFileName = function (fileName) {
    var pathList = fileName.split(".");
    var fileName = pathList[0];
    return fileName;
};

function expressLoader(opts) {
    this.opts = opts;
}

expressLoader.prototype.loadRoutes = function () {
    var controlName = this.opts.route_filter.control_name;

    app.use(function (req, res, next) {
        var url = req.originalUrl;

        if(req.session){
            var auth = req.session[controlName];
            if (url.indexOf("?") != -1) {
                var _tempArr = url.split("?");
                url = _tempArr[0];
            }
            var userRoutesList = this.opts.route_filter.list;
            var userRoutes = userRoutesList[auth];

            if (userRoutes.indexOf(url) != -1) {
                next();
            } else {
                var allRoutes = userRoutesList["all"];

                if (allRoutes.indexOf(url) == -1) {
                    return res.status(201).send("<html><body bgcolor='#3D3D3D'><center><font face='微软雅黑' size='72' color='red'>【404】您所访问的页面不存在!</font></center></body></html>");
                } else {
                    return res.status(201).send("<html><body bgcolor='#3D3D3D'><center><font face='微软雅黑' size='72' color='red'>【405】您没有权限访问此页面!</font></center></body></html>");
                }
            }
        }else{
            next();
        }
    });


    var routesDir = path.join(this.opts.basedir,"routes");
    if (fs.existsSync(routesDir)) {
        var routesList = geFileList(routesDir);
        if (routesList.length) {
            for (var i = 0; i < routesList.length; i++) {
                var item = routesList[i];
                var filePath = item.path;
                var route = require(filePath);
                var routeName = "/" + getFileName(item.name);

                app.use(routeName, route);

                console.log("[load routes]:",filePath)
            }
        }
    }

    app.use(function (req, res) {
        res.statusCode = 404;
        res.end();
    });
};


expressLoader.prototype.config = function () {
    var processCount = this.opts.process_count || 1;
    var env = this.opts.env || "development";

    app.set('views', path.join(this.opts.basedir, "views"));
    app.set('view engine', "ejs");
    app.use(morganLogger('dev'));
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({extended: false}));
    app.use(cookieParser);

    if (env == "development") {//
        //app.set('env', 'development');
        app.use(session({
            secret: 'jinwei-session-secret',
            cookie: {maxAge: 1000 * 60 * 60 * 24 * 30}, // 30 days
            name: 'jinweisession'
        }));
    } else {
        if (processCount == 1) {
            //app.set('env', 'development');
            app.use(session({
                secret: 'jinwei-session-secret',
                cookie: {maxAge: 1000 * 60 * 60 * 24 * 30}, // 30 days
                name: 'jinweisession'
            }));
        } else {
           // app.set('env', 'production');
            var redis = require('redis');
            var connectRedis = require('connect-redis');
            var RedisStore = connectRedis(session);
            var rClient = redis.createClient();
            var sessionStore = new RedisStore({client: rClient});
            var _session = session({
                store: sessionStore,
                secret: "jinwei-session-secret",
                resave: true,
                saveUninitialized: true
            });
            app.use(_session);
            app.sessionStore = sessionStore;
            app.session = _session;
        }
    }

    var publicDirList = this.opts.public_dir;

    if (publicDirList.length) {
        for (var i = 0; i < publicDirList.length; i++) {
            app.use(express.static(path.join(this.opts.basedir, publicDirList[i])));
            console.log("public dir added",path.join(this.opts.basedir, publicDirList[i]))
        }
    }
};


function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}


function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

expressLoader.prototype.run = function () {

    this.loadRoutes();
    this.config();

    if (this.opts.env == "development") {
        app.listen(this.opts.port, this.opts.host);
        app.on('error', onError);
        app.on('listening', onListening);
    } else {
        var http = require('http');
        var cluster = require('cluster');
        var numCPUs = require('os').cpus().length;
        if (!isNaN(this.opts.process_count)) {
            var process_count = (this.opts.process_count <= numCPUs) ? (this.opts.process_count) : numCPUs;
            if (cluster.isMaster) {
                for (var i = 0; i < process_count; i++) {
                    cluster.fork();
                }

                cluster.on('listening', function (worker, address) {
                    console.log('[Master]' +
                    'listening:worker' + worker.id +
                    ',pid:' + worker.process.pid +
                    ',address:' + address.address +
                    ',port:' + address.port);
                })
            } else {
                console.log('[worker] ' + "start worker ..." + cluster.worker.id);
                app.listen(this.opts.port, this.opts.host);
                app.on('error', onError);
                app.on('listening', onListening);
            }
        } else {
            console.error("configuration parameter named process_count is not a number!!");
        }
    }
};

module.exports = expressLoader;