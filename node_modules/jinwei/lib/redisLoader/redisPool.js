/**
 * Created by Administrator on 2015/12/30.
 */
var redis = require('redis');
var generic_pool = require('generic-pool');


function redisPoolFactory(pools_count, port, host, password) {
    this.pools = [];
    this.count = pools_count;
    this.port = port;
    this.host = host;
    this.password = password;
}
redisPoolFactory.prototype.run = function (cb) {
    for (var i = 1; i <= this.count; i++) {
        var pool_name = "pool_" + i.toString();
        this.pools[pool_name] = createRedisPool(pool_name, this.port, this.host, this.password);
    }
    cb(true);
};


var createRedisPool = function (poolname, port, host, password) {

    return generic_pool.Pool({
        name: poolname,
        create: function (callback) {
            var client = redis.createClient(port, host, {});

            if (password) {
                client.auth(password, function (err, resp) {
                    if (!err) {
                        console.log("auth success");
                    } else {
                        console.error("auth error");
                    }

                });
            }

            client.on('error', function (err) {
                console.error('error at connect redis: %s', err.stack);
            });

            callback(null, client);
        },
        destroy: function (client) {
            client.quit();
        }, //当超时则释放连接
        max: 10,   //最大连接数
        idleTimeoutMillis: 1000,  //超时时间
        log: false //是否显示日志
    });
};


redisPoolFactory.prototype.execute = function (pool_name, cb) {
    var pool = this.pools[pool_name];
    if (!pool) {
        console.error('error at execute command: %s', err.stack);
    }


    pool.acquire(function (err, client) {
        var release = function () {
            pool.release(client);
        };
        if (err) {
            console.error('error at execute command: %s', err.stack);
            release();
        } else {
            cb(client, release);
        }
    }, 0);
};


redisPoolFactory.prototype.dumpInfo = function () {

    for (var i = 1; i <= this.count; i++) {
        var pool_name = "pool_" + i.toString();
        var item = this.pools[pool_name];
        var obj = {
            name: item.getName(),
            total: item.getPoolSize(),
            available: item.availableObjectsCount(),
            waiting: item.waitingClientsCount()
        };
        console.log("name:" + obj.name + " total:" + obj.total + " available:" + obj.available + " waiting:" + obj.waiting);
    }

};
//var pools = new redisPoolFactory(10);

//pools.dumpInfo();


module.exports = redisPoolFactory;